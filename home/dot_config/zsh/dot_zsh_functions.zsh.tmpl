# vim: syntax=sh

function brew_bundle() {
  echo "Run brew bundle..."
  brew bundle --no-lock --file={{ .brew.brewfilePath }}
}

function brew_update {
  brew update &&
  brew upgrade &&
  brew cleanup
}

function zinit_update {
  zi self-update &&
  zi update --all &&
  zi delete --clean
}

function uv_update {
  uv tool upgrade --all &&
  uv clean
}

function update_all {
  brew_update &&
  zinit_update &&
  uv_update &&
  GH_TOKEN=$OCTO_TOKEN gh extension upgrade --all &&
  asdf reshim
}

function miszo_git_local_config {
    git config --local user.name {{ .name | quote }}
    git config --local user.email {{ .git.personal.email | quote }}
    echo "Local git user email changed to personal"
    git config --local --get user.name
    git config --local --get user.email
}

function git_clear_gone_branches {
    git remote prune origin
    git branch -vv | grep ': gone]'|  grep -v "\*" | awk '{ print $1; }' | xargs -I{} -n 1 git branch -D {}
    git prune
}

function copy_branch {
    git rev-parse --abbrev-ref HEAD | pbcopy
    echo Copied branch name: \`$(pbpaste)\`
}

function remove_docker_containers {
    echo "Stop running docker containers"
    docker stop $(docker ps -q)
    echo "Remove docker containers"
    docker rm $(docker ps -a -q)
}

function remove_docker_images {
    remove_docker_containers
    echo "Remove docker images"
    docker rmi $(docker images -f "dangling=true" -q)
}

function clean_docker {
    remove_docker_images
    echo "Remove docker volumes"
    docker volume rm $(docker volume ls -qf dangling=true)
    echo "Docker cleanup done!"
}


function git_pull_them_all {
    for D in *; do
        if [ -d "${D}/.git" ]; then
            echo "Running git pull and clean branches in ${D}" && cd "${D}" && git pull && git_clear_gone_branches && cd .. && echo "Done!\n"
        fi
    done
}

function add_git_hook() {
    # Check if both arguments are provided
    if [[ $# -ne 2 ]]; then
        echo "Usage: add_git_hook <source_path> <hook_name>"
        return 1
    fi

    local source_path="$1"
    local hook_name="$2"

    # Robust Git repository check
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a Git repository"
        return 1
    fi

    # Get the root directory of the Git repository
    local git_root=$(git rev-parse --show-toplevel)
    local git_hooks_dir="$git_root/.git/hooks"

    # Ensure the hooks directory exists
    mkdir -p "$git_hooks_dir"

    # Full path for the destination hook
    local destination_hook="$git_hooks_dir/$hook_name"

    # Check if source path exists and is a file
    if [[ ! -f "$source_path" ]]; then
        echo "Error: Source path '$source_path' does not exist or is not a file"
        return 1
    fi

    # Copy the hook file
    cp "$source_path" "$destination_hook"
    chmod +x "$destination_hook"
    echo "Git hook '$hook_name' added successfully from $source_path"
}

function add_git_hooks() {
    add_git_hook {{ joinPath .chezmoi.homeDir ".config" "git" "hooks" "conventional-commit-msg" | quote }} "commit-msg"
    add_git_hook {{ joinPath .chezmoi.homeDir ".config" "git" "hooks" "js-pre-commit" | quote }} "pre-commit"
}

function export_app_settings {
  echo "Exporting settings for $1..."
  defaults export $2 $3
  echo "Settings exported for $1!"
}

function import_app_settings {
  echo "Importing settings for $1..."
  defaults import $2 $3
  echo "Settings imported for $1!"
}

function export_all_settings {
  export_app_settings "Better Display" "pro.betterdisplay.BetterDisplay" {{ .exportedSettings.betterDisplayFilePath }}
  export_app_settings "Velja" "com.sindresorhus.Velja" {{ .exportedSettings.veljaFilePath }}
}

function import_all_settings {
  import_app_settings "Better Display" "pro.betterdisplay.BetterDisplay" {{ .exportedSettings.betterDisplayFilePath }}
  import_app_settings "Velja" "com.sindresorhus.Velja" {{ .exportedSettings.veljaFilePath }}
}

function delete_recursively {
    readonly folder_name=${1:?"node_modules"}
    find . -name "$folder_name" -type d -prune -print -exec rm -rf '{}' \;
}

function confetti {
  open raycast://extensions/raycast/raycast/confetti
}

function nvims {
  items=("default" "LazyVim")
  config=$(printf "%s\n" "${items[@]}" | fzf --prompt="ÔçØ Neovim Config" --height=~50% --layout=reverse --border --exit-0)
  if [[ -z $config ]]; then
    echo "Nothing selected"
    return 0
  elif [[ $config == "default" ]]; then
    config=""
  fi
  NVIM_APPNAME=$config nvim $@
}
