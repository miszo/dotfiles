# vim: syntax=sh

function brew_bundle() {
  echo "Run brew bundle..."
  brew bundle --no-lock --file={{ .brew.brewfilePath }}
}

function brew_update {
  brew update &&
  brew upgrade &&
  brew cleanup
}

function zinit_update {
  zi self-update &&
  zi update --all &&
  zi delete --clean
}

function uv_update {
  uv tool upgrade --all &&
  uv clean
}

function update_all {
  brew_update &&
  zinit_update &&
  uv_update &&
  GH_TOKEN=$OCTO_TOKEN gh extension upgrade --all &&
  asdf reshim
}

function miszo_git_local_config {
    git config --local user.name {{ .name | quote }}
    git config --local user.email {{ .git.personal.email | quote }}
    echo "Local git user email changed to personal"
    git config --local --get user.name
    git config --local --get user.email
}

function git_clear_gone_branches {
    git remote prune origin
    git branch -vv | grep ': gone]'|  grep -v "\*" | awk '{ print $1; }' | xargs -I{} -n 1 git branch -D {}
    git prune
}

function copy_branch {
    git rev-parse --abbrev-ref HEAD | pbcopy
    echo Copied branch name: \`$(pbpaste)\`
}

function remove_docker_containers {
    echo "Stop running docker containers"
    docker stop $(docker ps -q)
    echo "Remove docker containers"
    docker rm $(docker ps -a -q)
}

function remove_docker_images {
    remove_docker_containers
    echo "Remove docker images"
    docker rmi $(docker images -f "dangling=true" -q)
}

function clean_docker {
    remove_docker_images
    echo "Remove docker volumes"
    docker volume rm $(docker volume ls -qf dangling=true)
    echo "Docker cleanup done!"
}


function git_pull_them_all {
    for D in *; do
        if [ -d "${D}/.git" ]; then
            echo "Running git pull and clean branches in ${D}" && cd "${D}" && git pull && git_clear_gone_branches && cd .. && echo "Done!\n"
        fi
    done
}

# Function to copy git hook from ~/.config/git/prepare-commit-msg to current repository
function add_git_msg_hook() {
    # Source hook path
    # {{ joinPath .chezmoi.homeDir ".config" "git" "prepare-commit-msg" | quote }}
    local SOURCE_HOOK={{ joinPath .chezmoi.homeDir ".config" "git" "prepare-commit-msg" | quote }}

    # Destination hook path (in current repository's .git/hooks/)
    local DEST_HOOK="$(git rev-parse --git-dir)/hooks/prepare-commit-msg"

    # Check if source hook exists
    if [[ ! -f "$SOURCE_HOOK" ]]; then
        echo "Error: Source hook file not found at $SOURCE_HOOK"
        return 1
    fi

    # Check if we're inside a git repository
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not inside a Git repository"
        return 1
    fi

    # Create hooks directory if it doesn't exist
    mkdir -p "$(git rev-parse --git-dir)/hooks"

    # Copy the hook
    cp "$SOURCE_HOOK" "$DEST_HOOK"

    # Check copy operation
    if [[ $? -eq 0 ]]; then
        echo "Git hook copied successfully to $DEST_HOOK"
    else
        echo "Error: Failed to copy git hook"
        return 1
    fi
}

function export_app_settings {
  echo "Exporting settings for $1..."
  defaults export $2 $3
  echo "Settings exported for $1!"
}

function import_app_settings {
  echo "Importing settings for $1..."
  defaults import $2 $3
  echo "Settings imported for $1!"
}

function export_all_settings {
  export_app_settings "Better Display" "pro.betterdisplay.BetterDisplay" {{ .exportedSettings.betterDisplayFilePath }}
  export_app_settings "Velja" "com.sindresorhus.Velja" {{ .exportedSettings.veljaFilePath }}
}

function import_all_settings {
  import_app_settings "Better Display" "pro.betterdisplay.BetterDisplay" {{ .exportedSettings.betterDisplayFilePath }}
  import_app_settings "Velja" "com.sindresorhus.Velja" {{ .exportedSettings.veljaFilePath }}
}

function delete_recursively {
    readonly folder_name=${1:?"node_modules"}
    find . -name "$folder_name" -type d -prune -print -exec rm -rf '{}' \;
}

function confetti {
  open raycast://extensions/raycast/raycast/confetti
}
